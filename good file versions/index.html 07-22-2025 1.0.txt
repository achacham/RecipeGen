<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>RecipeGen — Choose Ingredients</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <!-- Typing‑indicator + bottom padding CSS -->
  <style>
    @keyframes dotDotDot {
      0%,20%   { content: ""; }
      40%      { content: "."; }
      60%      { content: ".."; }
      80%,100% { content: "..."; }
    }
    .typing {
      font-style: italic;
      color: #4A5568; /* text-gray-600 */
    }
    .typing::after {
      display: inline-block;
      width: 1em;
      text-align: left;
      animation: dotDotDot 1s steps(1,end) infinite;
      content: "";
    }
    /* ensure replies never hide under the input */
    #chatMessages {
      padding-bottom: 3rem;
    }
  </style>
</head>
<body class="bg-white text-gray-900 font-sans">

  <!-- 🟩 NAVIGATION BAR -->
  <header class="bg-green-600 text-white shadow">
    <div class="max-w-6xl mx-auto px-4 py-4 flex justify-between items-center">
      <h1 class="text-xl font-bold tracking-wide">RecipeGen</h1>
      <nav class="space-x-4">
        <a href="#" class="hover:underline">Home</a>
        <a href="#" class="hover:underline">Recipes</a>
        <a href="#" class="hover:underline">Contact</a>
        <a href="#" id="loginToggle" class="hover:underline cursor-pointer">Login</a>
      </nav>
    </div>
  </header>

  <!-- 🔐 LOGIN BOX -->
  <div id="loginBox" class="fixed top-24 right-6 bg-white border border-gray-300 shadow-md rounded p-4 w-72 hidden z-50">
    <h2 class="font-bold text-lg mb-2">User Login</h2>
    <input type="text" id="username" placeholder="Username" class="w-full mb-2 border px-3 py-1 rounded" />
    <input type="password" id="password" placeholder="Password" class="w-full mb-2 border px-3 py-1 rounded" />
    <button id="submitLogin" class="bg-green-600 text-white w-full py-2 rounded">Login</button>
  </div>

  <!-- 🧭 DUAL MODE SELECTION -->
  <section class="max-w-6xl mx-auto mt-6 px-4">
    <div class="flex items-center space-x-4">
      <label for="cuisineSelect" class="text-lg font-medium">Select a Cuisine:</label>
      <select id="cuisineSelect" class="border border-gray-300 rounded px-3 py-2">
        <option value="">-- Choose Cuisine --</option>
      </select>
      <button id="surpriseBtn" class="ml-4 bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600">
        Surprise Me!
      </button>
    </div>
  </section>

  <!-- 🥗 VERTICAL CATEGORY MENU -->
  <aside id="typeFilter"
         class="fixed top-32 left-0 w-64 p-4 bg-white border-r border-gray-200 z-40
                grid grid-cols-2 gap-3 overflow-y-auto h-[calc(100vh-8rem)]">
    <!-- dynamically injected -->
  </aside>

  <!-- 🧺 INGREDIENT GRID -->
  <section class="max-w-6xl mx-auto px-4 ml-72 mt-4 mb-28">
    <div id="ingredientGrid" class="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-5 gap-4">
      <!-- dynamically injected -->
    </div>
  </section>

  <!-- 🧾 FLOATING SELECTION BAR -->
  <div id="selectionBar" class="fixed bottom-0 left-0 w-full bg-gray-100 border-t border-gray-300 py-4 px-6 shadow-md flex justify-between items-center z-40 hidden">
    <div class="text-sm font-medium">
      <span id="selectionCount">0 ingredients selected</span> |
      <span id="priceDisplay">$0.00</span>
    </div>
    <button id="clearBtn" class="bg-gray-300 px-4 py-2 rounded hover:bg-gray-400">Clear All</button>
  </div>

  <!-- 💬 CHAT BOX -->
  <div id="chatBox" class="fixed bottom-4 right-4 w-80 h-64 bg-green-100 border border-green-600 shadow-lg rounded flex flex-col z-50">
    <div class="bg-green-600 text-white px-4 py-2 font-bold rounded-t">Ask RecipeGen</div>
    <div id="chatMessages" class="flex-1 p-3 overflow-y-auto text-sm"></div>
    <div class="p-2 border-t flex">
      <input type="text" id="chatInput" placeholder="Ask a question..." class="flex-1 px-2 py-1 border rounded mr-2 text-sm" />
      <button id="sendChat" class="bg-green-600 text-white px-3 py-1 rounded">Send</button>
    </div>
  </div>

  <!-- 🧠 SCRIPT -->
  <script>
    // —— Ingredient & category filter logic —— //
    const grid           = document.getElementById("ingredientGrid");
    const cuisineSelect  = document.getElementById("cuisineSelect");
    const typeFilter     = document.getElementById("typeFilter");
    const selectionBar   = document.getElementById("selectionBar");
    const clearBtn       = document.getElementById("clearBtn");
    let ingredients = [], selected = new Set();

    fetch("/ingredients")
      .then(res => res.json())
      .then(data => {
        ingredients = data;
        populateCuisineOptions();
        populateTypeFilter();
        renderIngredients(data);
      });

    function populateCuisineOptions() {
      const cuisines = new Set();
      ingredients.forEach(i => i.cuisine.forEach(c => cuisines.add(c)));
      [...cuisines].sort().forEach(c => {
        const opt = document.createElement("option");
        opt.value = c;
        opt.textContent = c.charAt(0).toUpperCase() + c.slice(1);
        cuisineSelect.appendChild(opt);
      });
    }

    function populateTypeFilter() {
      const types = [...new Set(ingredients.map(i => i.type))];
      types.sort().forEach(type => {
        const btn = document.createElement("button");
        btn.textContent = type.charAt(0).toUpperCase() + type.slice(1);
        btn.className = "w-full px-4 py-2 bg-gray-200 rounded hover:bg-gray-300 text-sm font-medium";
        btn.onclick = () => renderIngredients(ingredients.filter(i => i.type === type));
        typeFilter.appendChild(btn);
      });
    }

    function renderIngredients(data) {
      grid.innerHTML = "";
      const grouped = {};
      data.forEach(i => {
        if (!grouped[i.type]) grouped[i.type] = [];
        grouped[i.type].push(i);
      });
      for (const type in grouped) {
        const header = document.createElement("h2");
        header.textContent = type.charAt(0).toUpperCase() + type.slice(1);
        header.className = "col-span-full text-lg font-bold mt-6";
        grid.appendChild(header);
        grouped[type].forEach(i => {
          const card = document.createElement("div");
          card.className = "relative border rounded shadow hover:scale-105 transition-transform";
          card.onclick = () => toggleSelection(i.slug, card);

          const img = document.createElement("img");
          img.src = `/static/images/ingredients/${i.image}`;
          img.className = "w-full h-36 object-cover rounded-t";
          img.alt = i.name;

          const name = document.createElement("div");
          name.textContent = i.name;
          name.className = "text-center py-2 text-sm font-medium";

          const check = document.createElement("div");
          check.className = "absolute top-2 right-2 w-5 h-5 rounded-full bg-green-500 hidden";
          check.id = `check-${i.slug}`;

          card.appendChild(img);
          card.appendChild(name);
          card.appendChild(check);
          grid.appendChild(card);
        });
      }
    }

    function toggleSelection(slug, card) {
      if (selected.has(slug)) {
        selected.delete(slug);
        document.getElementById(`check-${slug}`).style.display = "none";
      } else {
        selected.add(slug);
        document.getElementById(`check-${slug}`).style.display = "block";
      }
      updateSelectionBar();
    }

    function updateSelectionBar() {
      const count = selected.size;
      document.getElementById("selectionCount").textContent =
        `${count} ingredient${count !== 1 ? "s" : ""} selected`;
      selectionBar.style.display = count > 0 ? "flex" : "none";
    }

    cuisineSelect.onchange = e =>
      renderIngredients(ingredients.filter(i => i.cuisine.includes(e.target.value)));

    document.getElementById("surpriseBtn").onclick = () => {
      const cs = [...new Set(ingredients.flatMap(i => i.cuisine))];
      const rnd = cs[Math.floor(Math.random() * cs.length)];
      cuisineSelect.value = rnd;
      renderIngredients(ingredients.filter(i => i.cuisine.includes(rnd)));
    };

    clearBtn.onclick = () => {
      selected.clear();
      document.querySelectorAll("[id^='check-']").forEach(el => el.style.display = "none");
      updateSelectionBar();
    };

    // —— Login UI —— //
    document.getElementById("loginToggle").onclick = () =>
      document.getElementById("loginBox").classList.toggle("hidden");

    document.getElementById("submitLogin").onclick = () => {
      fetch("/login", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          username: document.getElementById("username").value,
          password: document.getElementById("password").value
        })
      })
      .then(r => r.json())
      .then(res => alert(res.message || "Login successful!"));
    };

    // —— Chat behavior with typing animation, top‑of‑reply scroll, and Enter‑key support —— //
    const input      = document.getElementById("chatInput");
    const sendBtn    = document.getElementById("sendChat");
    const chatWindow = document.getElementById("chatMessages");

    input.addEventListener("keydown", e => {
      if (e.key === "Enter") {
        e.preventDefault();
        sendBtn.click();
      }
    });

    sendBtn.onclick = () => {
      const message = input.value.trim();
      if (!message) return;

      // show user
      chatWindow.innerHTML += `
        <div class="mb-1 text-right text-sm text-gray-800">
          <strong>You:</strong> ${message}
        </div>`;
      input.value = "";
      chatWindow.scrollTop = chatWindow.scrollHeight;

      // typing indicator
      const indicator = document.createElement("div");
      indicator.id = "typingIndicator";
      indicator.className = "text-left text-sm text-gray-600 italic";
      chatWindow.appendChild(indicator);
      chatWindow.scrollTop = chatWindow.scrollHeight;

      let dots = 0;
      const dotInterval = setInterval(() => {
        dots = (dots + 1) % 4;
        indicator.textContent = "Bot is thinking" + ".".repeat(dots);
      }, 500);

      // fetch reply
      fetch("/chat", {
        method: "POST",
        credentials: "include",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ message })
      })
      .then(r => r.json())
      .then(res => {
        clearInterval(dotInterval);
        indicator.remove();

        // append bot reply
        const replyDiv = document.createElement("div");
        replyDiv.className = "mb-2 text-left text-sm text-gray-700";
        replyDiv.innerHTML = `<strong>Bot:</strong> ${res.reply}`;
        chatWindow.appendChild(replyDiv);

        // scroll so the top of the reply is visible
        replyDiv.scrollIntoView({ block: "start" });
      })
      .catch(err => {
        clearInterval(dotInterval);
        indicator.remove();

        const errDiv = document.createElement("div");
        errDiv.className = "mb-2 text-left text-sm text-red-600";
        errDiv.innerHTML = `<strong>Bot:</strong> Error—please try again.`;
        chatWindow.appendChild(errDiv);

        // scroll to top of error
        errDiv.scrollIntoView({ block: "start" });
      });
    };
  </script>
</body>
</html>
