<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>RecipeGen ‚Äî Choose Ingredients</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <style>
    @keyframes dotDotDot {
      0%,20%   { content: ""; }
      40%      { content: "."; }
      60%      { content: ".."; }
      80%,100% { content: "..."; }
    }
    .typing::after {
      display: inline-block;
      width: 1em;
      text-align: left;
      animation: dotDotDot 1s steps(1,end) infinite;
      content: "";
    }
    .caret { transition: transform 0.3s ease; }
    .caret.rotate { transform: rotate(90deg); }
    .user-label {
      color: #2563eb;
      font-weight: bold;
      margin-right: 0.5em;
    }
    .bot-label {
      color: #16a34a;
      font-weight: bold;
      margin-right: 0.5em;
    }
  </style>
</head>
<body class="bg-white text-gray-900 font-sans">

<!-- DISH-TYPE SELECTOR GRID (ENTRY SCREEN) -->
<section id="dishTypeSelector" class="min-h-screen flex flex-col items-center justify-center bg-white absolute top-0 left-0 w-full z-50" style="background:rgba(255,255,255,0.98);">
  <div class="max-w-3xl w-full text-center mb-8">
    <h2 class="text-4xl md:text-5xl font-bold text-neutral-dark mb-4">
      What would you like to cook today?
    </h2>
    <p class="text-lg text-gray-600 mb-6">
      Choose a meal type and we'll help you create the perfect recipe.
    </p>
  </div>
  <div class="grid grid-cols-2 md:grid-cols-3 gap-6 w-full max-w-3xl px-4" id="dishTypeGrid">
    <!-- Cards will be filled by JavaScript below -->
  </div>
</section>

<!-- MAIN INTERFACE WRAPPER -->
<div id="mainInterface" style="display:none;">

<!-- CHANGE DISH BUTTON -->
 <div class="w-full flex items-center bg-yellow-100 border-b border-yellow-200 py-4 px-6">
  <button id="backToDishBtn" class="flex items-center text-white bg-yellow-600 hover:bg-yellow-700 px-6 py-2 rounded shadow font-bold text-base border border-yellow-700 transition-all">
    &#8592; Change Dish Type
  </button>
</div>

  <!-- NAVIGATION BAR -->
  <header class="bg-green-600 text-white shadow">
    <div class="max-w-6xl mx-auto px-4 py-4 flex justify-between items-center">
      <h1 class="text-xl font-bold tracking-wide">RecipeGen</h1>
      <nav class="space-x-4">
        <a href="#" class="hover:underline">Home</a>
        <a href="#" class="hover:underline">Recipes</a>
        <a href="#" class="hover:underline">Contact</a>
        <a href="#" id="loginToggle" class="hover:underline cursor-pointer">Login</a>
      </nav>
    </div>
  </header>

  <!-- LOGIN BOX -->
  <div id="loginBox" class="fixed top-24 right-6 bg-white border border-gray-300 shadow-md rounded p-4 w-72 hidden z-50">
    <h2 class="font-bold text-lg mb-2">User Login</h2>
    <input type="text" id="username" placeholder="Username" class="w-full mb-2 border px-3 py-1 rounded" />
    <input type="password" id="password" placeholder="Password" class="w-full mb-2 border px-3 py-1 rounded" />
    <button id="submitLogin" class="bg-green-600 text-white w-full py-2 rounded">Login</button>
  </div>

  <!-- CUISINE SELECT -->
  <section class="max-w-6xl mx-auto mt-6 px-4">
    <div class="flex items-center space-x-4">
      <label for="cuisineSelect" class="text-lg font-medium">Select a Cuisine:</label>
      <select id="cuisineSelect" class="border border-gray-300 rounded px-3 py-2">
        <option value="">-- Choose Cuisine --</option>
      </select>
      <button id="surpriseBtn" class="ml-4 bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600">
        Surprise Me!
      </button>
    </div>
  </section>

  <!-- CATEGORY MENU -->
  <aside id="typeFilter"
    class="fixed top-32 left-0 bg-white border-r border-gray-200 z-40 overflow-y-auto h-[calc(100vh-8rem)] space-y-2 text-sm font-medium"
    style="width:256px;min-width:256px;max-width:256px;box-sizing:border-box;">
    <div class="space-y-1 w-full" style="width:100%;box-sizing:border-box;">
      <!-- Main Protein Button -->
      <button onclick="toggleSubmenu()"
        class="w-full flex justify-between items-center bg-gray-200 px-4 py-2 rounded hover:bg-gray-300"
        style="width:100%;min-width:100%;max-width:100%;box-sizing:border-box;">
        Protein <span id="proteinCaret" class="caret">&rsaquo;</span>
      </button>
      <!-- Protein Submenu (hidden by default) -->
      <div id="proteinSubmenu" class="hidden mt-2"
        style="width:100%;min-width:100%;max-width:100%;box-sizing:border-box;">
        <button onclick="filterByType('meats')"
          class="text-left w-full px-4 py-2 rounded bg-gray-100 text-sm hover:bg-gray-200 transition-colors"
          style="width:100%;min-width:100%;max-width:100%;box-sizing:border-box;">
          Meats
        </button>
        <button onclick="filterByType('fish')"
          class="text-left w-full px-4 py-2 rounded bg-gray-100 text-sm hover:bg-gray-200 transition-colors"
          style="width:100%;min-width:100%;max-width:100%;box-sizing:border-box;">
          Fish
        </button>
      </div>
      <!-- Other types injected dynamically -->
    </div>
  </aside>

  <!-- MAIN GRID AREA -->
  <section class="max-w-6xl mx-auto px-4 ml-72 mt-4 mb-28">
    <div class="mb-4 flex gap-4">
  <button id="generateVideoBtn" class="bg-red-600 text-white px-4 py-2 rounded hover:bg-red-700 text-sm">
    üé• Generate Video
  </button>
  <button id="generateRecipeBtn" class="bg-green-700 text-white px-4 py-2 rounded hover:bg-green-800 text-sm">
    üçΩÔ∏è Generate Recipe
  </button>
</div>

    <!-- Ingredient Grid -->
    <div id="ingredientGrid" class="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-5 gap-4"></div>
    <!-- Video Display -->
    <div class="mt-6">
      <video id="videoPlayer" controls class="w-full rounded shadow hidden">
        <source id="videoSource" src="" type="video/mp4">
        Your browser does not support the video tag.
      </video>
    </div>
  </section>

  <!-- FLOATING SELECTION BAR -->
  <div id="selectionBar" class="fixed bottom-0 left-0 w-full bg-gray-100 border-t border-gray-300 py-4 px-6 shadow-md flex justify-between items-center z-40 hidden">
    <div class="text-sm font-medium">
      <span id="selectionCount">0 ingredients selected</span> |
      <span id="priceDisplay">$0.00</span>
    </div>
    <button id="clearBtn" class="bg-gray-300 px-4 py-2 rounded hover:bg-gray-400">Clear All</button>
  </div>

  <!-- CHAT BOX -->
  <div id="chatBox" class="fixed bottom-4 right-4 w-80 h-64 bg-green-100 border border-green-600 shadow-lg rounded flex flex-col z-50">
    <div class="bg-green-600 text-white px-4 py-2 font-bold rounded-t">Ask RecipeGen</div>
    <div id="chatMessages" class="flex-1 p-3 overflow-y-auto text-sm"></div>
    <div class="p-2 border-t flex">
      <input type="text" id="chatInput" placeholder="Ask a question..." class="flex-1 px-2 py-1 border rounded mr-2 text-sm" />
      <button id="sendChat" class="bg-green-600 text-white px-3 py-1 rounded">Send</button>
    </div>
    </div>
</div> <!-- END #mainInterface -->

<!-- SCRIPT -->
<script>
    const grid = document.getElementById("ingredientGrid");
    const cuisineSelect = document.getElementById("cuisineSelect");
    const selectionBar = document.getElementById("selectionBar");
    const clearBtn = document.getElementById("clearBtn");
    const selected = new Set();
    let ingredients = [];
    let ingredientsReady = false;

fetch("/ingredients").then(res => res.json()).then(data => {
  ingredients = data;
  console.log("Loaded ingredient types:");
  ingredients.forEach(i => console.log(i.name, "‚Üí", i.type));
  populateCuisineOptions();
  populateTypeButtons();
  renderIngredients(ingredients);
  ingredientsReady = true;
});

function populateCuisineOptions() {
  const cuisines = new Set();
  ingredients.forEach(i => i.cuisine.forEach(c => cuisines.add(c)));
  [...cuisines].sort().forEach(c => {
    const opt = document.createElement("option");
    opt.value = c;
    opt.textContent = c.charAt(0).toUpperCase() + c.slice(1);
    cuisineSelect.appendChild(opt);
  });
}

function populateTypeButtons() {
  const types = [...new Set(ingredients.map(i => i.type))].sort();
  types.forEach(type => {
    if (type === "meat" || type === "fish") return;
    const btn = document.createElement("button");
    btn.textContent = type.charAt(0).toUpperCase() + type.slice(1);
    btn.className = "w-full px-4 py-2 bg-gray-200 rounded hover:bg-gray-300 text-sm font-medium";
    btn.onclick = () => renderIngredients(ingredients.filter(i => i.type === type));
    document.getElementById("typeFilter").appendChild(btn);
  });
}

function filterByType(type) {
  if (!ingredientsReady) {
    console.warn("Ingredients not yet loaded. Please wait.");
    return;
  }
  const filtered = ingredients.filter(i => i.type === type);
  renderIngredients(filtered);
}

function renderIngredients(data) {
  grid.innerHTML = "";
  data.forEach(i => {
    const card = document.createElement("div");
    card.className = "relative border rounded shadow hover:scale-105 transition-transform";
    card.onclick = () => toggleSelection(i.slug, card);

    const img = document.createElement("img");
    img.src = `/static/images/ingredients/${i.image}`;
    img.className = "w-full h-36 object-cover rounded-t";
    img.alt = i.name;

    const name = document.createElement("div");
    name.textContent = i.name;
    name.className = "text-center py-2 text-sm font-medium";

    const check = document.createElement("div");
    check.className = "absolute top-2 right-2 w-5 h-5 rounded-full bg-green-500 hidden";
    check.id = `check-${i.slug}`;

    card.appendChild(img);
    card.appendChild(name);
    card.appendChild(check);
    grid.appendChild(card);
  });
}

function toggleSelection(slug, card) {
  const check = document.getElementById(`check-${slug}`);
  if (selected.has(slug)) {
    selected.delete(slug);
    check.style.display = "none";
  } else {
    selected.add(slug);
    check.style.display = "block";
  }
  updateSelectionBar();
}

function updateSelectionBar() {
  const count = selected.size;
  document.getElementById("selectionCount").textContent = `${count} ingredient${count !== 1 ? "s" : ""} selected`;
  selectionBar.style.display = count > 0 ? "flex" : "none";
}

cuisineSelect.onchange = e => {
  renderIngredients(ingredients.filter(i => i.cuisine.includes(e.target.value)));
};

document.getElementById("surpriseBtn").onclick = () => {
  const cs = [...new Set(ingredients.flatMap(i => i.cuisine))];
  const rnd = cs[Math.floor(Math.random() * cs.length)];
  cuisineSelect.value = rnd;
  renderIngredients(ingredients.filter(i => i.cuisine.includes(rnd)));
};

clearBtn.onclick = () => {
  selected.clear();
  document.querySelectorAll("[id^='check-']").forEach(el => el.style.display = "none");
  updateSelectionBar();
};

function toggleSubmenu() {
  const submenu = document.getElementById("proteinSubmenu");
  const caret = document.getElementById("proteinCaret");

  const isCurrentlyHidden = submenu.classList.contains("hidden");

  if (isCurrentlyHidden) {
    submenu.classList.remove("hidden");
    submenu.style.display = "block";
    caret.innerHTML = "‚ñæ"; // down arrow
  } else {
    submenu.classList.add("hidden");
    submenu.style.display = "none";
    caret.innerHTML = "‚ñ∏"; // right arrow
  }
}

function filterByType(type) {
  renderIngredients(ingredients.filter(i => i.type === type));
}

document.getElementById("generateVideoBtn").onclick = async () => {
  const res = await fetch("/generate_video", {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({ ingredients: Array.from(selected) })
  });
  const data = await res.json();
  const video = document.getElementById("videoPlayer");
  const source = document.getElementById("videoSource");
  source.src = data.video_url;
  video.load();
  video.classList.remove("hidden");
};


document.getElementById("loginToggle").onclick = () =>
  document.getElementById("loginBox").classList.toggle("hidden");

document.getElementById("submitLogin").onclick = () => {
  fetch("/login", {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({
      username: document.getElementById("username").value,
      password: document.getElementById("password").value
    })
  })
  .then(r => r.json())
  .then(res => alert(res.message || "Login successful!"));
};


// --- Chat Welcome Message ---
const messages = document.getElementById("chatMessages");
if (messages && messages.childElementCount === 0) {
  const welcome = document.createElement("div");
  welcome.innerHTML = '<span class="bot-label">RecipeGen:</span> Hi! Ask me anything about ingredients, cuisines, or how to use RecipeGen. I can help with your selections, but not with full recipes.';
  messages.appendChild(welcome);
}



// Chat logic
document.getElementById("sendChat").onclick = async () => {
  const input = document.getElementById("chatInput");
  const messages = document.getElementById("chatMessages");
  const text = input.value.trim();
  if (!text) return;

  const userMsg = document.createElement("div");
  userMsg.innerHTML = '<span class="user-label">You:</span> ' + text;
  messages.appendChild(userMsg);
  input.value = "";

  const botMsg = document.createElement("div");
  botMsg.innerHTML = '<span class="bot-label">RecipeGen:</span> <span class="typing"></span>';
  messages.appendChild(botMsg);
  messages.scrollTop = messages.scrollHeight;

  const res = await fetch("/chat", {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({ message: text })
  });
  const data = await res.json();
  botMsg.innerHTML = '<span class="bot-label">RecipeGen:</span> ' + data.reply;
  botMsg.scrollIntoView({ behavior: "smooth", block: "start" }); 
};

document.getElementById("chatInput").addEventListener("keydown", function(event) {
  if (event.key === "Enter") {
    event.preventDefault();
    document.getElementById("sendChat").click();
  }
});

// === Dish-Type Selector Logic ===

const dishTypes = [
  {
    id: "curry",
    name: "Curry",
    description: "Aromatic and flavorful",
    image: "https://images.unsplash.com/photo-1565557623262-b51c2513a641?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=300"
  },
  {
    id: "pasta",
    name: "Pasta",
    description: "Classic Italian comfort",
    image: "https://images.unsplash.com/photo-1551183053-bf91a1d81141?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=300"
  },
  {
    id: "risotto",
    name: "Risotto",
    description: "Creamy and rich",
    image: "https://images.unsplash.com/photo-1476124369491-e7addf5db371?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=300"
  },
  {
    id: "soup",
    name: "Soup",
    description: "Warming and nourishing",
    image: "https://images.unsplash.com/photo-1547592166-23ac45744acd?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=300"
  },
  {
    id: "sandwich",
    name: "Sandwich",
    description: "Fresh and satisfying",
    image: "https://images.unsplash.com/photo-1539252554453-80ab65ce3586?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=300"
  },
  {
    id: "salad",
    name: "Salad",
    description: "Light and refreshing",
    image: "https://images.unsplash.com/photo-1512621776951-a57141f2eefd?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=300"
  },
  {
    id: "baked-dish",
    name: "Baked Dish",
    description: "Oven-baked goodness",
    image: "https://images.unsplash.com/photo-1574894709920-11b28e7367e3?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=300"
  },
  {
    id: "stir-fry",
    name: "Stir-Fry",
    description: "Quick and vibrant",
    image: "https://images.unsplash.com/photo-1512058564366-18510be2db19?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=300"
  },
  {
    id: "bowl",
    name: "Bowl",
    description: "Balanced and hearty",
    image: "https://images.unsplash.com/photo-1546069901-ba9599a7e63c?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=300"
  },
  {
    id: "wrap",
    name: "Wrap",
    description: "Portable and delicious",
    image: "https://images.unsplash.com/photo-1626700051175-6818013e1d4f?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=300"
  },
  {
    id: "skewer",
    name: "Skewer",
    description: "Grilled and smoky",
    image: "https://images.unsplash.com/photo-1529042410759-befb1204b468?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=300"
  },
  {
    id: "dessert",
    name: "Dessert",
    description: "Sweet and indulgent",
    image: "https://images.unsplash.com/photo-1551024506-0bccd828d307?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=300"
  }
];

function showDishTypeSelector() {
  // Hide main interface, show dish type selector, reset scroll
  document.getElementById("mainInterface").style.display = "none";
  document.getElementById("dishTypeSelector").style.display = "flex";
  window.scrollTo(0, 0);
}

function showMainInterface() {
  document.getElementById("dishTypeSelector").style.display = "none";
  document.getElementById("mainInterface").style.display = "block";
  window.scrollTo(0, 0);
}

function handleDishCardClick() {
  // Always reset cuisine dropdown and grid to default
  if (cuisineSelect) cuisineSelect.value = "";
  renderIngredients(ingredients); // Reset to show ALL ingredients
  showMainInterface();
}

// Build the dish type grid on page load
document.addEventListener("DOMContentLoaded", function() {
  const dishTypeGrid = document.getElementById("dishTypeGrid");
  dishTypes.forEach(dt => {
    const card = document.createElement("div");
    card.className = "dish-card cursor-pointer rounded-lg overflow-hidden shadow-lg hover:shadow-2xl bg-white transition-all flex flex-col";
    card.onclick = handleDishCardClick;
    const img = document.createElement("img");
    img.src = dt.image;
    img.alt = dt.name;
    img.className = "w-full h-40 object-cover";
    const name = document.createElement("div");
    name.className = "font-bold text-lg mt-2";
    name.textContent = dt.name;
    const desc = document.createElement("div");
    desc.className = "text-gray-600 text-sm mb-4";
    desc.textContent = dt.description;
    card.appendChild(img);
    card.appendChild(name);
    card.appendChild(desc);
    dishTypeGrid.appendChild(card);
  });

  // CHANGE DISH TYPE BUTTON LOGIC
  var backBtn = document.getElementById("backToDishBtn");
  if (backBtn) {
    backBtn.onclick = showDishTypeSelector;
  }
});

</script>

</body>
</html>
